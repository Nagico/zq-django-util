name: Code Check

on:
  workflow_dispatch:
  push:
    branches:
      - master
  pull_request:

jobs:
  flake8:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 flake8-pyproject

      - name: Lint with flake8
        run: |
          flake8 . --count --statistics

  pytest:
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        # os: [ "ubuntu-latest", "windows-latest" ]
        # python-version: [ "3.8", "3.9", "3.10", "3.11" ]
        # django-version: [ "4.0", "4.1" ]
        # drf-version: [ "3.14" ]
        os: [ "ubuntu-latest" ]
        python-version: [ "3.10" ]
        django-version: [ "4.1" ]
        drf-version: [ "3.14" ]
#        exclude:
#          - python-version: "3.11"
#            django-version: "3.2"
#          - python-version: "3.11"
#            django-version: "4.0"
#          - python-version: "3.10"
#            django-version: "3.2"
#          - os: "windows-latest"
#            python-version: "3.8"
    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}
      DJANGO: ${{ matrix.django-version }}
      DRF: ${{ matrix.drf-version }}
    runs-on: ${{ matrix.os }}
    needs:
      - flake8
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Set up python ${{ matrix.python-version }}
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-py${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Backup poetry.lock
        run: cp poetry.lock poetry.lock.bak

      - name: Load cached lockfile
        id: cached-lockfile
        uses: actions/cache@v3
        with:
          path: poetry.lock
          key: lock-${{ runner.os }}-py${{ matrix.python-version }}-dj${{ matrix.django-version }}-drf${{ matrix.drf-version }}-${{ hashFiles('poetry.lock.bak') }}

      - name: Add Django ${{ matrix.django-version }} and DRF ${{ matrix.drf-version }}
        if: steps.cached-lockfile.outputs.cache-hit != 'true'
        run: poetry add --lock --group test django~${{ matrix.django-version }} djangorestframework~${{ matrix.drf-version }} meilisearch

      - name: Load cached lockfile
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-py${{ matrix.python-version }}-dj${{ matrix.django-version }}-drf${{ matrix.drf-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-py${{ matrix.python-version }}-dj${{ matrix.django-version }}-drf${{ matrix.drf-version }}-
            venv-${{ runner.os }}-py${{ matrix.python-version }}-dj${{ matrix.django-version }}-
            venv-${{ runner.os }}-py${{ matrix.python-version }}-

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --without dev --no-interaction --no-root

      - name: Install library
        run: poetry install --without dev --no-interaction

      - name: Run tests
        run: |
          source $VENV
          python runtests.py --coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          env_vars: OS,PYTHON,DJANGO,DRF
          fail_ci_if_error: true
